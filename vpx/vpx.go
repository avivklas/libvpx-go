// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Thu, 07 Jan 2016 19:56:58 MSK.
// By http://git.io/cgogen. DO NOT EDIT.

package vpx

/*
#cgo pkg-config: vpx
#include <vpx/vp8cx.h>
#include <vpx/vp8dx.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// CodecVp8Cx function as declared in vpx-1.5.0/vp8cx.h:36
func CodecVp8Cx() *CodecIface {
	ret := C.vpx_codec_vp8_cx()
	v := *(**CodecIface)(unsafe.Pointer(&ret))
	return v
}

// CodecVp9Cx function as declared in vpx-1.5.0/vp8cx.h:45
func CodecVp9Cx() *CodecIface {
	ret := C.vpx_codec_vp9_cx()
	v := *(**CodecIface)(unsafe.Pointer(&ret))
	return v
}

// CodecVersion function as declared in vpx-1.5.0/vpx_codec.h:242
func CodecVersion() int {
	ret := C.vpx_codec_version()
	v := (int)(ret)
	return v
}

// CodecVersionStr function as declared in vpx-1.5.0/vpx_codec.h:264
func CodecVersionStr() string {
	ret := C.vpx_codec_version_str()
	v := packPCharString(ret)
	return v
}

// CodecVersionExtraStr function as declared in vpx-1.5.0/vpx_codec.h:273
func CodecVersionExtraStr() string {
	ret := C.vpx_codec_version_extra_str()
	v := packPCharString(ret)
	return v
}

// CodecBuildConfig function as declared in vpx-1.5.0/vpx_codec.h:282
func CodecBuildConfig() string {
	ret := C.vpx_codec_build_config()
	v := packPCharString(ret)
	return v
}

// CodecIfaceName function as declared in vpx-1.5.0/vpx_codec.h:292
func CodecIfaceName(iface []CodecIface) string {
	ciface, _ := (*C.vpx_codec_iface_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&iface)).Data)), cgoAllocsUnknown
	ret := C.vpx_codec_iface_name(ciface)
	v := packPCharString(ret)
	return v
}

// CodecErrToString function as declared in vpx-1.5.0/vpx_codec.h:305
func CodecErrToString(err CodecErr) string {
	cerr, _ := (C.vpx_codec_err_t)(err), cgoAllocsUnknown
	ret := C.vpx_codec_err_to_string(cerr)
	v := packPCharString(ret)
	return v
}

// CodecGetError function as declared in vpx-1.5.0/vpx_codec.h:318
func CodecGetError(ctx []CodecCtx) string {
	cctx, _ := unpackArgSCodecCtx(ctx)
	ret := C.vpx_codec_error(cctx)
	packSCodecCtx(ctx, cctx)
	v := packPCharString(ret)
	return v
}

// CodecErrorDetail function as declared in vpx-1.5.0/vpx_codec.h:331
func CodecErrorDetail(ctx []CodecCtx) string {
	cctx, _ := unpackArgSCodecCtx(ctx)
	ret := C.vpx_codec_error_detail(cctx)
	packSCodecCtx(ctx, cctx)
	v := packPCharString(ret)
	return v
}

// CodecDestroy function as declared in vpx-1.5.0/vpx_codec.h:351
func CodecDestroy(ctx []CodecCtx) CodecErr {
	cctx, _ := unpackArgSCodecCtx(ctx)
	ret := C.vpx_codec_destroy(cctx)
	packSCodecCtx(ctx, cctx)
	v := (CodecErr)(ret)
	return v
}

// CodecGetCaps function as declared in vpx-1.5.0/vpx_codec.h:361
func CodecGetCaps(iface []CodecIface) CodecCaps {
	ciface, _ := (*C.vpx_codec_iface_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&iface)).Data)), cgoAllocsUnknown
	ret := C.vpx_codec_get_caps(ciface)
	v := (CodecCaps)(ret)
	return v
}

// ImageAlloc function as declared in vpx-1.5.0/vpx_image.h:161
func ImageAlloc(img []Image, fmt ImageFormat, dW uint, dH uint, align uint) *Image {
	cimg, _ := unpackArgSImage(img)
	cfmt, _ := (C.vpx_img_fmt_t)(fmt), cgoAllocsUnknown
	cdW, _ := (C.uint)(dW), cgoAllocsUnknown
	cdH, _ := (C.uint)(dH), cgoAllocsUnknown
	calign, _ := (C.uint)(align), cgoAllocsUnknown
	ret := C.vpx_img_alloc(cimg, cfmt, cdW, cdH, calign)
	packSImage(img, cimg)
	v := NewImageRef(ret)
	return v
}

// ImageWrap function as declared in vpx-1.5.0/vpx_image.h:186
func ImageWrap(img []Image, fmt ImageFormat, dW uint, dH uint, align uint, imgData []byte) *Image {
	cimg, _ := unpackArgSImage(img)
	cfmt, _ := (C.vpx_img_fmt_t)(fmt), cgoAllocsUnknown
	cdW, _ := (C.uint)(dW), cgoAllocsUnknown
	cdH, _ := (C.uint)(dH), cgoAllocsUnknown
	calign, _ := (C.uint)(align), cgoAllocsUnknown
	cimgData, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&imgData)).Data)), cgoAllocsUnknown
	ret := C.vpx_img_wrap(cimg, cfmt, cdW, cdH, calign, cimgData)
	packSImage(img, cimg)
	v := NewImageRef(ret)
	return v
}

// ImageSetRect function as declared in vpx-1.5.0/vpx_image.h:207
func ImageSetRect(img []Image, x uint, y uint, w uint, h uint) int {
	cimg, _ := unpackArgSImage(img)
	cx, _ := (C.uint)(x), cgoAllocsUnknown
	cy, _ := (C.uint)(y), cgoAllocsUnknown
	cw, _ := (C.uint)(w), cgoAllocsUnknown
	ch, _ := (C.uint)(h), cgoAllocsUnknown
	ret := C.vpx_img_set_rect(cimg, cx, cy, cw, ch)
	packSImage(img, cimg)
	v := (int)(ret)
	return v
}

// ImageFlip function as declared in vpx-1.5.0/vpx_image.h:221
func ImageFlip(img []Image) {
	cimg, _ := unpackArgSImage(img)
	C.vpx_img_flip(cimg)
	packSImage(img, cimg)
}

// ImageFree function as declared in vpx-1.5.0/vpx_image.h:229
func ImageFree(img []Image) {
	cimg, _ := unpackArgSImage(img)
	C.vpx_img_free(cimg)
	packSImage(img, cimg)
}

// CodecEncInitVer function as declared in vpx-1.5.0/vpx_encoder.h:789
func CodecEncInitVer(ctx []CodecCtx, iface []CodecIface, cfg []CodecEncCfg, flags CodecFlags, ver int) CodecErr {
	cctx, _ := unpackArgSCodecCtx(ctx)
	ciface, _ := (*C.vpx_codec_iface_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&iface)).Data)), cgoAllocsUnknown
	ccfg, _ := unpackArgSCodecEncCfg(cfg)
	cflags, _ := (C.vpx_codec_flags_t)(flags), cgoAllocsUnknown
	cver, _ := (C.int)(ver), cgoAllocsUnknown
	ret := C.vpx_codec_enc_init_ver(cctx, ciface, ccfg, cflags, cver)
	packSCodecEncCfg(cfg, ccfg)
	packSCodecCtx(ctx, cctx)
	v := (CodecErr)(ret)
	return v
}

// CodecEncInitMultiVer function as declared in vpx-1.5.0/vpx_encoder.h:824
func CodecEncInitMultiVer(ctx []CodecCtx, iface []CodecIface, cfg []CodecEncCfg, numEnc int, flags CodecFlags, dsf []Rational, ver int) CodecErr {
	cctx, _ := unpackArgSCodecCtx(ctx)
	ciface, _ := (*C.vpx_codec_iface_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&iface)).Data)), cgoAllocsUnknown
	ccfg, _ := unpackArgSCodecEncCfg(cfg)
	cnumEnc, _ := (C.int)(numEnc), cgoAllocsUnknown
	cflags, _ := (C.vpx_codec_flags_t)(flags), cgoAllocsUnknown
	cdsf, _ := unpackArgSRational(dsf)
	cver, _ := (C.int)(ver), cgoAllocsUnknown
	ret := C.vpx_codec_enc_init_multi_ver(cctx, ciface, ccfg, cnumEnc, cflags, cdsf, cver)
	packSRational(dsf, cdsf)
	packSCodecEncCfg(cfg, ccfg)
	packSCodecCtx(ctx, cctx)
	v := (CodecErr)(ret)
	return v
}

// CodecEncConfigDefault function as declared in vpx-1.5.0/vpx_encoder.h:861
func CodecEncConfigDefault(iface []CodecIface, cfg []CodecEncCfg, reserved uint) CodecErr {
	ciface, _ := (*C.vpx_codec_iface_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&iface)).Data)), cgoAllocsUnknown
	ccfg, _ := unpackArgSCodecEncCfg(cfg)
	creserved, _ := (C.uint)(reserved), cgoAllocsUnknown
	ret := C.vpx_codec_enc_config_default(ciface, ccfg, creserved)
	packSCodecEncCfg(cfg, ccfg)
	v := (CodecErr)(ret)
	return v
}

// CodecEncConfigSet function as declared in vpx-1.5.0/vpx_encoder.h:880
func CodecEncConfigSet(ctx []CodecCtx, cfg []CodecEncCfg) CodecErr {
	cctx, _ := unpackArgSCodecCtx(ctx)
	ccfg, _ := unpackArgSCodecEncCfg(cfg)
	ret := C.vpx_codec_enc_config_set(cctx, ccfg)
	packSCodecEncCfg(cfg, ccfg)
	packSCodecCtx(ctx, cctx)
	v := (CodecErr)(ret)
	return v
}

// CodecGetGlobalHeaders function as declared in vpx-1.5.0/vpx_encoder.h:895
func CodecGetGlobalHeaders(ctx []CodecCtx) *FixedBuf {
	cctx, _ := unpackArgSCodecCtx(ctx)
	ret := C.vpx_codec_get_global_headers(cctx)
	packSCodecCtx(ctx, cctx)
	v := NewFixedBufRef(ret)
	return v
}

// CodecEncode function as declared in vpx-1.5.0/vpx_encoder.h:940
func CodecEncode(ctx []CodecCtx, img []Image, pts CodecPts, duration uint, flags EncFrameFlags, deadline uint) CodecErr {
	cctx, _ := unpackArgSCodecCtx(ctx)
	cimg, _ := unpackArgSImage(img)
	cpts, _ := (C.vpx_codec_pts_t)(pts), cgoAllocsUnknown
	cduration, _ := (C.ulong)(duration), cgoAllocsUnknown
	cflags, _ := (C.vpx_enc_frame_flags_t)(flags), cgoAllocsUnknown
	cdeadline, _ := (C.ulong)(deadline), cgoAllocsUnknown
	ret := C.vpx_codec_encode(cctx, cimg, cpts, cduration, cflags, cdeadline)
	packSImage(img, cimg)
	packSCodecCtx(ctx, cctx)
	v := (CodecErr)(ret)
	return v
}

// CodecSetCxDataBuf function as declared in vpx-1.5.0/vpx_encoder.h:990
func CodecSetCxDataBuf(ctx []CodecCtx, buf []FixedBuf, padBefore uint, padAfter uint) CodecErr {
	cctx, _ := unpackArgSCodecCtx(ctx)
	cbuf, _ := unpackArgSFixedBuf(buf)
	cpadBefore, _ := (C.uint)(padBefore), cgoAllocsUnknown
	cpadAfter, _ := (C.uint)(padAfter), cgoAllocsUnknown
	ret := C.vpx_codec_set_cx_data_buf(cctx, cbuf, cpadBefore, cpadAfter)
	packSFixedBuf(buf, cbuf)
	packSCodecCtx(ctx, cctx)
	v := (CodecErr)(ret)
	return v
}

// CodecGetCxData function as declared in vpx-1.5.0/vpx_encoder.h:1019
func CodecGetCxData(ctx []CodecCtx, iter []*CodecIter) *CodecCxPkt {
	cctx, _ := unpackArgSCodecCtx(ctx)
	citer, _ := (*unsafe.Pointer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&iter)).Data)), cgoAllocsUnknown
	ret := C.vpx_codec_get_cx_data(cctx, citer)
	packSCodecCtx(ctx, cctx)
	v := NewCodecCxPktRef(ret)
	return v
}

// CodecGetPreviewFrame function as declared in vpx-1.5.0/vpx_encoder.h:1035
func CodecGetPreviewFrame(ctx []CodecCtx) *Image {
	cctx, _ := unpackArgSCodecCtx(ctx)
	ret := C.vpx_codec_get_preview_frame(cctx)
	packSCodecCtx(ctx, cctx)
	v := NewImageRef(ret)
	return v
}

// CodecVp8Dx function as declared in vpx-1.5.0/vp8dx.h:37
func CodecVp8Dx() *CodecIface {
	ret := C.vpx_codec_vp8_dx()
	v := *(**CodecIface)(unsafe.Pointer(&ret))
	return v
}

// CodecVp9Dx function as declared in vpx-1.5.0/vp8dx.h:46
func CodecVp9Dx() *CodecIface {
	ret := C.vpx_codec_vp9_dx()
	v := *(**CodecIface)(unsafe.Pointer(&ret))
	return v
}
